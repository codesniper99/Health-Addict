# Generated by Django 2.0.3 on 2018-10-15 18:07

import core.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hitcount.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Trainee'), (2, 'Industry Expert'), (4, 'Teacher'), (3, 'Moderator'), (4, 'SubMentor')], null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('has_paid_subscription', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('bio', models.CharField(blank=True, max_length=2000, null=True, validators=[django.core.validators.MinLengthValidator(100)])),
                ('profile_picture', models.ImageField(blank=True, default='default_profile_pic.jpg', null=True, upload_to=core.models.profile_media_path)),
                ('signup_completed', models.BooleanField(default=False)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(max_length=5000)),
                ('answer_attachment_files', models.FileField(blank=True, null=True, upload_to=core.models.answer_media_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answer_accepted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_choice_text', models.CharField(max_length=100)),
                ('answer_choice_correct', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100)),
                ('course_picture', models.ImageField(blank=True, default='default_course_pic.jpg', null=True, upload_to=core.models.course_picture_media_path)),
                ('course_about', models.CharField(max_length=5000)),
                ('course_prerequisite', models.CharField(default='None', max_length=5000)),
                ('course_difficulty', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('course_progress', models.IntegerField(default=1)),
                ('course_duration', models.DurationField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_name', models.CharField(max_length=100)),
                ('exam_number', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('exam_file', models.FileField(blank=True, null=True, upload_to=core.models.exam_media_path)),
            ],
        ),
        migrations.CreateModel(
            name='ExamSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_submission_file', models.FileField(blank=True, null=True, upload_to=core.models.exam_submission_media_path)),
                ('exam_score', models.FloatField(default=0)),
                ('exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='examsubmissions', to='core.Exam')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_name', models.CharField(max_length=100)),
                ('lesson_number', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('lesson_file', models.URLField(default='https://youtu.be/3tgz4EM7ItE')),
                ('is_paid', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_name', models.CharField(max_length=100)),
                ('module_about', models.CharField(max_length=5000)),
                ('module_number', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('module_progress', models.IntegerField(default=1)),
                ('module_duration', models.DurationField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='core.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=100)),
                ('project_picture', models.ImageField(blank=True, default='default_project_pic.jpg', null=True, upload_to=core.models.project_picture_media_path)),
                ('project_about', models.CharField(max_length=5000)),
                ('project_prerequisite', models.CharField(default='None', max_length=5000)),
                ('project_difficulty', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('project_duration', models.DurationField(blank=True, default=0, null=True)),
                ('project_file', models.FileField(blank=True, null=True, upload_to=core.models.project_media_path)),
                ('is_capstone', models.BooleanField(default=False, verbose_name='Capstone Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_submission_file', models.FileField(blank=True, null=True, upload_to=core.models.project_submission_media_path)),
                ('project_score', models.FloatField(default=0)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projectsubmissions', to='core.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Query',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_title', models.CharField(max_length=100)),
                ('query_text', models.TextField(max_length=5000)),
                ('query_attachment_files', models.FileField(blank=True, null=True, upload_to=core.models.query_media_path)),
                ('query_solved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Queries',
            },
            bases=(models.Model, hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'IQ'), (2, 'Verbal Ability')], null=True)),
                ('question_text', models.CharField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='Referral_Mentor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Referral_SubMentor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Referral_Trainee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='subSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subskill_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'IQ'), (2, 'Verbal Ability')], null=True)),
                ('test_score', models.IntegerField(default=0)),
                ('test_taken_on_date', models.DateField(auto_now_add=True)),
                ('questions', models.ManyToManyField(blank=True, related_name='tests', to='core.Question')),
            ],
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('score', models.FloatField(blank=True, default=0, null=True)),
                ('mentee_pref_count', models.IntegerField(default=5, verbose_name='Preferred menteee count')),
                ('refral_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
                ('skills', models.ManyToManyField(blank=True, related_name='skills', to='core.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='SubMentor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mentee_pref_count', models.IntegerField(default=3, verbose_name='Preferred mentee count')),
                ('refral_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trainee',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('score', models.FloatField(blank=True, default=0, null=True)),
                ('academic_score', models.FloatField(blank=True, default=0, null=True)),
                ('personality_h', models.FloatField(blank=True, default=0, null=True)),
                ('personality_e', models.FloatField(blank=True, default=0, null=True)),
                ('personality_x', models.FloatField(blank=True, default=0, null=True)),
                ('personality_a', models.FloatField(blank=True, default=0, null=True)),
                ('personality_c', models.FloatField(blank=True, default=0, null=True)),
                ('personality_o', models.FloatField(blank=True, default=0, null=True)),
                ('iq_score', models.FloatField(blank=True, default=0, null=True)),
                ('verbal_ability_score', models.FloatField(blank=True, default=0, null=True)),
                ('course_score', models.FloatField(blank=True, default=0, null=True)),
                ('project_score', models.FloatField(blank=True, default=0, null=True)),
                ('qa_score', models.FloatField(blank=True, default=0, null=True)),
                ('refral_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='test',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='query',
            name='query_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='queries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='query',
            name='query_tags',
            field=models.ManyToManyField(blank=True, related_name='queries', to='core.Tag'),
        ),
        migrations.AddField(
            model_name='projectsubmission',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projectsubmissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='project_tags',
            field=models.ManyToManyField(blank=True, related_name='projects', to='core.Tag'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='module',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='core.Module'),
        ),
        migrations.AddField(
            model_name='examsubmission',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='examsubmissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='exam',
            name='module',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='core.Module'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_tags',
            field=models.ManyToManyField(blank=True, related_name='courses', to='core.Tag'),
        ),
        migrations.AddField(
            model_name='answerchoice',
            name='question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answerchoices', to='core.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='answer_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='query',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.Query'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='profile_tags',
            field=models.ManyToManyField(blank=True, related_name='profiles', to='core.Tag'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='trainee',
            name='courses',
            field=models.ManyToManyField(blank=True, related_name='courses', to='core.Course'),
        ),
        migrations.AddField(
            model_name='trainee',
            name='mentors',
            field=models.ManyToManyField(blank=True, related_name='trainees', to='core.Mentor'),
        ),
        migrations.AddField(
            model_name='trainee',
            name='projects',
            field=models.ManyToManyField(blank=True, related_name='projects', to='core.Project'),
        ),
        migrations.AddField(
            model_name='trainee',
            name='submentors',
            field=models.ManyToManyField(blank=True, related_name='trainees', to='core.SubMentor'),
        ),
        migrations.AddField(
            model_name='submentor',
            name='subcourses',
            field=models.ManyToManyField(blank=True, related_name='subcourses', to='core.Course'),
        ),
        migrations.AddField(
            model_name='submentor',
            name='subprojects',
            field=models.ManyToManyField(blank=True, related_name='subprojects', to='core.Project'),
        ),
        migrations.AddField(
            model_name='submentor',
            name='subskills',
            field=models.ManyToManyField(blank=True, related_name='subskills', to='core.subSkill'),
        ),
    ]
